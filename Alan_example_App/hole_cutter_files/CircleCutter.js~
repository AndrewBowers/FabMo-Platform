

$(document).ready(function() {

    $(".canvas-changer").change(function() {
        OnParamChange();
    });

    connectFeedrateDefaults();
    
    RedrawCanvas();
});    

var connectFeedrateDefaults = function() {

    $("#feedrateDropdown").change(function() {
         var fr_val = document.getElementById("feedrateDropdown").value;
         
         if (fr_val != 0) // don't reset custom
            document.getElementById("feedrate").value = fr_val;
         
    });
    
    $("#feedrate").change(function() {
    
         // select the last one, "custom"       
        var fr_dd_2 = $("#feedrateDropdown");
        fr_dd_2[0].selectedIndex=3;
        
        // foundation builds a custom dropdown, we have to notify it of the change
        // http://foundation.zurb.com/docs/v/4.3.2/components/custom-forms.html
        fr_dd_2.trigger("change", true);
     
    });
}

var RedrawCanvas = function () {

    var canvas = document.getElementById("app-canvas");
    var params = HA_CircleCutter.collectParams(document);

    // first erase the canvas
    var ctx = canvas.getContext('2d');
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    HA_CircleCutter.draw(canvas, params);
}

var OnParamChange = function() {

    RedrawCanvas();
}

var OnGenGCode = function() {

    var params = HA_CircleCutter.collectParams(document);
    var gCode = HA_CircleCutter.genGCode(params);
    
    HA_Utils.exportToFile(gCode, "partGCode.nc");
    
}

export GetGCodefile = function() {

    var params = HA_CircleCutter.collectParams(document);
    var gCode = HA_CircleCutter.genGCode(params);
    
    return(gCode);
    
}

HA_Utils = {

     exportToFile: function(content, filename) {

        var file = "data:text/csv;charset=utf-8,";
        file += content;
        
        var encodedUri = encodeURI(file);
        var link = document.createElement("a");
        link.setAttribute("href", encodedUri);
        link.setAttribute("download", filename);
        
        link.click();
    }
}

// this should be renamed to HoleCutter

HA_CircleCutter = {

    collectParams: function(doc) {
    
        var yAxisTop = 8.0; // in inches
        var epsilon = .0001; // tolerance for error checking
    
        var res = {};
        res.holeDiam = doc.getElementById("holeDiam").valueAsNumber;
        res.bitDiam = doc.getElementById("bitDiam").valueAsNumber;
        res.xpos = doc.getElementById("xpos").valueAsNumber
        res.ypos = yAxisTop - doc.getElementById("ypos").valueAsNumber; // invert the y axis 
        res.depth = doc.getElementById("depth").valueAsNumber;
        res.feedrate = doc.getElementById("feedrate").valueAsNumber; // in/min
        if (doc.getElementById("depthPerPass"))
            res.depthPerPass = doc.getElementById("depthPerPass").valueAsNumber;
 
        res.epsilon = epsilon;
        
        return res;
    },

    draw: function(canvas, params) {
    
        var pxPerIn = 100;
    
        var ctx = canvas.getContext('2d');
        ctx.save();
        
        ctx.fillStyle = "black"; 
        ctx.beginPath();
        ctx.arc(params.xpos*pxPerIn, params.ypos*pxPerIn, params.holeDiam*pxPerIn, 0, 2*Math.PI, true);
        ctx.fill(); 
        
        ctx.restore();
    },
    
    genGCode: function(params) {
    
        var depth = params.depth;
        var depthPerPass = params.depthPerPass;
        var holeRadius = params.holeDiam/2 + params.bitDiam/2; // tool path circle radius 
        var leftX = params.xpos - holeRadius;
        var midY = params.ypos;
        var feedrate = params.feedrate; // in/min
        var epsilon = params.epsilon;
        
        if (depthPerPass < epsilon) 
            return "Error - depth per pass too small";
        
        if (holeRadius < epsilon)
            return "Error - hole diameter too small";
              
        var gCode = "";
        
        // todo: comment string 
        // (Box generated by.. <ApplicationName> on <Date>)
        // (dims)
        // (material)
        // (toolbit)
        gCode += "(ToDo, add information about what, how, when, and who made this file)\n\n";
        
        // initialization
        gCode += "G17 (set XY Plane)\n";
        gCode += "G20 (inches)\n";
        gCode += "G40 (Tool Radius Compensation: off)\n";
        gCode += "G49 (Tool Length Offset Compensation: off)\n";
        gCode += "G54 (Work Coordinate System)\n";
        gCode += "G80 (Cancel Canned Cycle)\n";
        gCode += "G90 (Absolute programming)\n";
        gCode += "G94 (Feedrate per minute)\n";
        gCode += "G0 Z1.0(seek to z = 1)\n"; 
        gCode += "F" + feedrate + " (Feedrate - in inches per minute)\n";
        gCode += "G00 X" + leftX + " Y" + midY + " Z1.0\n";

        var curHeight = depth > depthPerPass ? -depthPerPass : -depth;        

        while (curHeight >= -depth) {
        
            gCode += "G01 X" + leftX + " Y" + midY + " Z" + curHeight + "\n";        
            gCode += "G02 X" + leftX + " Y" + midY + " I" + holeRadius + " J0" + "\n";
            
            if (curHeight <= -depth)
                break;
                
            curHeight = curHeight - depthPerPass;
            if (curHeight < -depth) 
                curHeight = -depth;
        }
        
        gCode += "G00 X" + leftX + " Y" + midY + " Z1.0\n";
        
        return gCode;
    }

}

